#BlueJ class context
comment0.target=Parser
comment0.text=\r\n\ See\ assignment\ handout\ for\ the\ grammar.\r\n\ You\ need\ to\ implement\ the\ parse(..)\ method\ and\ all\ the\ rest\ of\ the\ parser.\r\n\ There\ are\ several\ methods\ provided\ for\ you\:\r\n\ -\ several\ utility\ methods\ to\ help\ with\ the\ parsing\r\n\ See\ also\ the\ TestParser\ class\ for\ testing\ your\ code.\\\r\n\r\n\ PROG\ \ \:\:\=\ [\ STMT\ ]*\r\n\ STMT\ \ \:\:\=\ ACT\ ";"\ |\ LOOP\ |\ IF\ |\ WHILE\r\n\ ACT\ \ \ \:\:\=\ "move"\ |\ "turnL"\ |\ "turnR"\ |\ "turnAround"\ |\ "shieldOn"\ |\r\n\ \ \ \ \ \ \ \ \ \ \ "shieldOff"\ |\ "takeFuel"\ |\ "wait"\r\n\ LOOP\ \ \:\:\=\ "loop"\ BLOCK\r\n\ IF\ \ \ \ \:\:\=\ "if"\ "("\ COND\ ")"\ BLOCK\r\n\ WHILE\ \:\:\=\ "while"\ "("\ COND\ ")"\ BLOCK\r\n\ BLOCK\ \:\:\=\ "{"\ STMT+\ "}"\r\n\ COND\ \ \:\:\=\ RELOP\ "("\ SENS\ ","\ NUM\ ")\r\n\ RELOP\ \:\:\=\ "lt"\ |\ "gt"\ |\ "eq"\r\n\ SENS\ \ \:\:\=\ "fuelLeft"\ |\ "oppLR"\ |\ "oppFB"\ |\ "numBarrels"\ |\r\n\ \ \ \ \ \ \ \ \ \ \ "barrelLR"\ |\ "barrelFB"\ |\ "wallDist"\r\n\ NUM\ \ \ \:\:\=\ "-?[1-9][0-9]*|0"\r\n
comment1.params=s
comment1.target=ProgramNode\ parse(java.util.Scanner)
comment1.text=\r\n\ The\ top\ of\ the\ parser,\ which\ is\ handed\ a\ scanner\ containing\r\n\ the\ text\ of\ the\ program\ to\ parse.\r\n\ Returns\ the\ parse\ tree.\r\n
comment10.params=
comment10.target=java.lang.String\ toString()
comment11.params=robot
comment11.target=void\ execute(Robot)
comment12.params=
comment12.target=java.lang.String\ toString()
comment13.params=robot
comment13.target=void\ execute(Robot)
comment14.params=
comment14.target=java.lang.String\ toString()
comment15.params=robot
comment15.target=void\ execute(Robot)
comment16.params=
comment16.target=java.lang.String\ toString()
comment17.params=robot
comment17.target=void\ execute(Robot)
comment18.params=
comment18.target=java.lang.String\ toString()
comment19.params=robot
comment19.target=void\ execute(Robot)
comment2.params=s
comment2.target=ProgramNode\ parseProg(java.util.Scanner)
comment2.text=\r\n\ PROG\ \ \:\:\=\ [\ STMT\ ]*\r\n
comment20.params=
comment20.target=java.lang.String\ toString()
comment21.params=robot
comment21.target=void\ execute(Robot)
comment22.params=
comment22.target=java.lang.String\ toString()
comment23.params=robot
comment23.target=void\ execute(Robot)
comment24.params=
comment24.target=java.lang.String\ toString()
comment25.params=robot
comment25.target=void\ execute(Robot)
comment26.params=
comment26.target=java.lang.String\ toString()
comment27.params=s
comment27.target=ProgramNode\ parseLoop(java.util.Scanner)
comment27.text=\r\n\ LOOP\ \ \:\:\=\ "loop"\ BLOCK\r\n
comment28.params=robot
comment28.target=void\ execute(Robot)
comment29.params=
comment29.target=java.lang.String\ toString()
comment3.params=robot
comment3.target=void\ execute(Robot)
comment30.params=s
comment30.target=ProgramNode\ parseIf(java.util.Scanner)
comment30.text=\r\n\ IF\ \ \ \ \:\:\=\ "if"\ "("\ COND\ ")"\ BLOCK\ [\ "else"\ BLOCK\ ]\r\n\r\n
comment31.params=r
comment31.target=void\ execute(Robot)
comment32.params=
comment32.target=java.lang.String\ toString()
comment33.params=s
comment33.target=ProgramNode\ parseWhile(java.util.Scanner)
comment33.text=\r\n\ WHILE\ \:\:\=\ "while"\ "("\ COND\ ")"\ BLOCK\r\n\r\n
comment34.params=r
comment34.target=void\ execute(Robot)
comment35.params=
comment35.target=java.lang.String\ toString()
comment36.params=s
comment36.target=CondiNode\ parseCond(java.util.Scanner)
comment36.text=\r\n\ COND\ \ \:\:\=\ "and"\ "("\ COND\ ","\ COND\ ")"\ |\ "or"\ "("\ COND\ ","\ COND\ ")"\ |\ "not"\ "("\ COND\ ")"\ \ |\ RELOP\ "("\ EXPR\ ","\ EXPR\ ")\r\n\r\n
comment37.params=r
comment37.target=boolean\ execute(Robot)
comment38.params=
comment38.target=java.lang.String\ toString()
comment39.params=s
comment39.target=CondiNode\ buildCond(java.util.Scanner)
comment39.text=\r\n\ Build\ condition\ node\r\n\r\n
comment4.params=
comment4.target=java.lang.String\ toString()
comment40.params=r
comment40.target=boolean\ execute(Robot)
comment41.params=
comment41.target=java.lang.String\ toString()
comment42.params=r
comment42.target=boolean\ execute(Robot)
comment43.params=
comment43.target=java.lang.String\ toString()
comment44.params=r
comment44.target=boolean\ execute(Robot)
comment45.params=
comment45.target=java.lang.String\ toString()
comment46.params=s
comment46.target=RelopNode\ parseRelop(java.util.Scanner)
comment46.text=\r\n\ RELOP\ \:\:\=\ "lt"\ |\ "gt"\ |\ "eq"\r\n\r\n
comment47.params=s
comment47.target=NumNode\ parseSens(java.util.Scanner)
comment47.text=\r\n\ SENS\ \ \:\:\=\ "fuelLeft"\ |\ "oppLR"\ |\ "oppFB"\ |\ "numBarrels"\ |\ "barrelLR"\ |\ "barrelFB"\ |\ "wallDist"\r\n\r\n\ @param\ s\r\n\ @return\r\n
comment48.params=robot
comment48.target=int\ execute(Robot)
comment49.params=
comment49.target=java.lang.String\ toString()
comment5.params=s
comment5.target=ProgramNode\ parseSTMT(java.util.Scanner)
comment5.text=\r\n\ STMT\ \ \:\:\=\ ACT\ ";"\ |\ LOOP\ |\ IF\ |\ WHILE\r\n
comment50.params=robot
comment50.target=int\ execute(Robot)
comment51.params=
comment51.target=java.lang.String\ toString()
comment52.params=s
comment52.target=BlockNode\ parseBlock(java.util.Scanner)
comment52.text=\r\n\ BLOCK\ \:\:\=\ "{"\ STMT+\ "}"\r\n
comment53.params=robot
comment53.target=void\ preExec(Robot)
comment54.params=robot
comment54.target=void\ execute(Robot)
comment55.params=robot
comment55.target=void\ postExec(Robot)
comment56.params=
comment56.target=java.lang.String\ toString()
comment57.params=message\ s
comment57.target=void\ fail(java.lang.String,\ java.util.Scanner)
comment57.text=\r\n\ Report\ a\ failure\ in\ the\ parser.\r\n
comment58.params=p\ message\ s
comment58.target=java.lang.String\ require(java.lang.String,\ java.lang.String,\ java.util.Scanner)
comment58.text=\r\n\ Requires\ that\ the\ next\ token\ matches\ a\ pattern\ if\ it\ matches,\ it\ consumes\r\n\ and\ returns\ the\ token,\ if\ not,\ it\ throws\ an\ exception\ with\ an\ error\r\n\ message\r\n
comment59.params=p\ message\ s
comment59.target=java.lang.String\ require(java.util.regex.Pattern,\ java.lang.String,\ java.util.Scanner)
comment6.params=s
comment6.target=ProgramNode\ parseAct(java.util.Scanner)
comment6.text=\r\n\ ACT\ \ \ \:\:\=\ "move"\ |\ "turnL"\ |\ "turnR"\ |\ "turnAround"\ |\ "shieldOn"\ |\ "shieldOff"\ |\ "takeFuel"\ |\ "wait"\r\n
comment60.params=p\ message\ s
comment60.target=int\ requireInt(java.lang.String,\ java.lang.String,\ java.util.Scanner)
comment60.text=\r\n\ Requires\ that\ the\ next\ token\ matches\ a\ pattern\ (which\ should\ only\ match\ a\r\n\ number)\ if\ it\ matches,\ it\ consumes\ and\ returns\ the\ token\ as\ an\ integer\r\n\ if\ not,\ it\ throws\ an\ exception\ with\ an\ error\ message\r\n
comment61.params=p\ message\ s
comment61.target=int\ requireInt(java.util.regex.Pattern,\ java.lang.String,\ java.util.Scanner)
comment62.params=p\ s
comment62.target=boolean\ checkFor(java.lang.String,\ java.util.Scanner)
comment62.text=\r\n\ Checks\ whether\ the\ next\ token\ in\ the\ scanner\ matches\ the\ specified\r\n\ pattern,\ if\ so,\ consumes\ the\ token\ and\ return\ true.\ Otherwise\ returns\r\n\ false\ without\ consuming\ anything.\r\n
comment63.params=p\ s
comment63.target=boolean\ checkFor(java.util.regex.Pattern,\ java.util.Scanner)
comment64.params=s
comment64.target=NumNode\ parseEXPR(java.util.Scanner)
comment64.text=\r\n\ Parse\ expression\r\n\r\n\ @param\ s\r\n\ @return\r\n
comment65.params=s
comment65.target=NumNode\ buildEXPR(java.util.Scanner)
comment65.text=\r\n\ expression\ builder\ for\ number\ parsing\r\n\r\n\ @param\ s\r\n\ @return\r\n
comment66.params=robot
comment66.target=int\ execute(Robot)
comment67.params=
comment67.target=java.lang.String\ toString()
comment68.params=robot
comment68.target=int\ execute(Robot)
comment69.params=
comment69.target=java.lang.String\ toString()
comment7.params=robot
comment7.target=void\ execute(Robot)
comment70.params=robot
comment70.target=int\ execute(Robot)
comment71.params=
comment71.target=java.lang.String\ toString()
comment72.params=robot
comment72.target=int\ execute(Robot)
comment73.params=
comment73.target=java.lang.String\ toString()
comment74.params=s
comment74.target=NumNode\ parseNUM(java.util.Scanner)
comment74.text=\r\n\ NUM\ \ \ \:\:\=\ "-?[1-9][0-9]*|0"\r\n\r\n\ @param\ s\r\n\ @return\r\n
comment75.params=robot
comment75.target=int\ execute(Robot)
comment76.params=
comment76.target=java.lang.String\ toString()
comment8.params=
comment8.target=java.lang.String\ toString()
comment9.params=robot
comment9.target=void\ execute(Robot)
numComments=77
